<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>LLM Evaluation Test</title>
  <style>
    body {
      font-family: sans-serif;
      margin: 20px;
    }
    #progressBar {
      width: 100%;
      background: #eee;
      border: 1px solid #bbb;
      margin-top: 10px;
    }
    #progressBar div {
      height: 20px;
      background: #4caf50;
      width: 0%;
    }
    #results {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid #ddd;
    }
    #log {
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #ddd;
      padding: 5px;
      margin-top: 10px;
      font-size: 0.9em;
      background: #f9f9f9;
    }
    .header
    {
        position:absolute;
        top:0px;
        right:0px;
    }

    .container {
        margin: 0 auto;
        max-width: 1024px;
        padding: 1rem;
        position:relative;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<body class="container">
  <h1>LLM Evaluation Test</h1>
  <div class="header">
    <a link href="index.htm">Chat</a> | 
    <a link href="Benchmark.htm">Benchmark</a> | 
    <a link href="quality.htm">Quality</a>
 </div> 
  <p>
    This test will through the MMLU dataset, prompt the language model with each question, and tally the number of correct single-letter answers.
  </p>
  <button id="startTest">Start / Resume Test</button>
  <button id="stopTest" disabled>Stop Test</button>
  <button id="clearResults">Clear Results</button>
  <div id="progressInfo">
    <p>Test Progress: <span id="currentCount">0</span> questions attempted</p>
    <div id="progressBar"><div></div></div>
  </div>
  <div id="results">
    <h2>Results</h2>
    <p>Correct Answers: <span id="correctCount">0</span></p>
    <p>Total Questions: <span id="questionCount">0</span></p>
    <p>Score: <span id="scorePercent">0</span>%</p>
    <p>Non-single-letter responses: <span id="nonLetterCount">0</span></p>
  </div>
  <div id="log"></div>

  <script type="module">
    // --- IndexedDB functions ---
    let db;
    function initDB() {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open("LLMTestDB", 1);
        request.onupgradeneeded = (event) => {
          db = event.target.result;
          if (!db.objectStoreNames.contains("progress")) {
            const store = db.createObjectStore("progress", { keyPath: "id" });
            // Added currentFile and questionIndex (index in current file)
            store.put({ id: "progress", currentQuestion: 0, correct: 0, nonLetter: 0, currentFile: 1, questionIndex: 0 });
          }
          if (!db.objectStoreNames.contains("logs")) {
            db.createObjectStore("logs", { autoIncrement: true });
          }
        };
        request.onsuccess = (event) => {
          db = event.target.result;
          resolve();
        };
        request.onerror = (event) => {
          reject(event.target.error);
        };
      });
    }

    function getProgress() {
      return new Promise((resolve, reject) => {
        const tx = db.transaction("progress", "readonly");
        const store = tx.objectStore("progress");
        const request = store.get("progress");
        request.onsuccess = () => resolve(request.result || { id: "progress", currentQuestion: 0, correct: 0, nonLetter: 0 });
        request.onerror = () => reject(request.error);
      });
    }

    function setProgress(progress) {
      return new Promise((resolve, reject) => {
        const tx = db.transaction("progress", "readwrite");
        const store = tx.objectStore("progress");
        const request = store.put(progress);
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
      });
    }

    function addLogToDB(message) {
      const tx = db.transaction("logs", "readwrite");
      const store = tx.objectStore("logs");
      store.add({ message, timestamp: Date.now() });
    }

    function getLogsFromDB() {
      return new Promise((resolve, reject) => {
        const tx = db.transaction("logs", "readonly");
        const store = tx.objectStore("logs");
        const request = store.getAll();
        request.onsuccess = () => resolve(request.result || []);
        request.onerror = () => reject(request.error);
      });
    }

    function clearDB() {
      return new Promise((resolve, reject) => {
        // Clear progress and logs
        const tx1 = db.transaction("progress", "readwrite");
        const store1 = tx1.objectStore("progress");
        store1.put({ id: "progress", currentQuestion: 0, correct: 0, nonLetter: 0 });
        tx1.oncomplete = () => {
          const tx2 = db.transaction("logs", "readwrite");
          const store2 = tx2.objectStore("logs");
          const clearRequest = store2.clear();
          clearRequest.onsuccess = () => resolve();
          clearRequest.onerror = () => reject(clearRequest.error);
        }
        tx1.onerror = () => reject(tx1.error);
      });
    }

    // --- Utility functions ---
    const logDiv = document.getElementById("log");
    function log(message) {
      logDiv.innerHTML += `<div>${message}</div>`;
      logDiv.scrollTop = logDiv.scrollHeight;
      addLogToDB(message);
    }

    async function restoreLogs() {
      try {
        const logs = await getLogsFromDB();
        if (logs.length) {
          logDiv.innerHTML = "";
          logs.forEach(item => {
            logDiv.innerHTML += `<div>${item.message}</div>`;
          });
        }
      } catch (e) {
        console.error("Error restoring logs:", e);
      }
    }

    let progress = { currentQuestion: 0, correct: 0, nonLetter: 0 };
    async function restoreProgress() {
      try {
        progress = await getProgress();
        // Set globals based on stored progress
        currentFile = progress.currentFile || 1;
        progress.questionIndex = progress.questionIndex || 0;
        document.getElementById("currentCount").innerText = progress.currentQuestion;
        document.getElementById("correctCount").innerText = progress.correct;
        document.getElementById("questionCount").innerText = progress.currentQuestion;
        const score = progress.currentQuestion > 0 ? (progress.correct / progress.currentQuestion * 100).toFixed(2) : 0;
        document.getElementById("scorePercent").innerText = score;
        document.getElementById("nonLetterCount").innerText = progress.nonLetter;
      } catch (e) {
        console.error("Error restoring progress:", e);
      }
    }

    // --- Other functions from your original code ---
    function mapIndexToLetter(idx) {
      return String.fromCharCode(65 + idx);
    }

    const TOTAL_FILES = 100;
    let currentFile = 1;
    let questions = [];
    let testing = false;

    async function loadNextQuestions() {
      try {
        const resp = await fetch(`MMLU/MMLU_${currentFile}.json`);
        if (!resp.ok) {
          log(`Failed to load file: MMLU_${currentFile}.json`);
          // If file load fails, move to next file
          currentFile++;
          // Reset restart pointer for new file
          progress.questionIndex = 0;
          return;
        }
        const text = await resp.text();
        let loadedQuestions = [];
        text.split('\n').forEach(line => {
          line = line.trim();
          if (line) {
            try {
              const obj = JSON.parse(line);
              loadedQuestions.push(obj);
            } catch (err) {
              log(`Error parsing JSON in file MMLU_${currentFile}.json: ${err}`);
            }
          }
        });
        // If resuming in the middle of a file, skip already asked questions.
        if (progress.questionIndex > 0) {
          loadedQuestions = loadedQuestions.slice(progress.questionIndex);
        }
        questions = loadedQuestions;
        log(`Loaded questions from file MMLU_${currentFile}.json starting at question ${progress.questionIndex + 1}`);
      } catch (err) {
        log(`Error loading file MMLU_${currentFile}.json: ${err}`);
      }
    }

    async function askQuestion(qObj) {
        const letterChoices = qObj.choices.map((choice, index) => `${mapIndexToLetter(index)}. ${choice}`).join(' ');
        const promptText = `Respond with a single letter option only, no explanation.\n\nQuestion: ${qObj.question}\nChoices: ${letterChoices}\nAnswer:`;
        let answer = "";
        try {
          showBusy(true);
          const stream = await window.ai.languageModel.create ? await session.promptStreaming(promptText) : null;
          for await (const chunk of stream) {
            answer += chunk;
          }
        } catch (e) {
          log(`prompt API error: ${e}`);
          testing = false;
          // Set URL parameter 'autoResume' to "true" then reload the page after 2 seconds.
          const url = new URL(window.location.href);
          url.searchParams.set("autoResume", "true");
          setTimeout(() => {
            window.location.href = url.toString();
          }, 2000);
        } finally {
          showBusy(false);
        }
        return answer.trim();
      }

    function showBusy(busy) {
      document.getElementById("stopTest").disabled = busy ? false : true;
    }

    async function runTests() {
      testing = true;
      document.getElementById("startTest").disabled = true;
      document.getElementById("stopTest").disabled = false;

      while (testing && (questions.length > 0 || currentFile <= TOTAL_FILES)) {
        if (questions.length === 0) {
          await loadNextQuestions();
          if (questions.length === 0) {
            // File is finished, move to next file and reset per-file index.
            currentFile++;
            progress.questionIndex = 0;
            await setProgress({ id: "progress", ...progress, currentFile, questionIndex: 0 });
            continue;
          }
        }
        const qObj = questions.shift();
        progress.currentQuestion++;
        // Increase the per-file question index.
        progress.questionIndex++;
        document.getElementById("currentCount").innerText = progress.currentQuestion;
        log(`Testing Q${progress.currentQuestion}: ${qObj.question}`);
        let response = await askQuestion(qObj);
        log(`Raw response: "${response}"`);

        const singleLetterMatch = response.match(/^([A-Da-d])(?:\..*)?$/);
        if (!singleLetterMatch) {
          progress.nonLetter++;
          log(`Response is not a valid letter response.`);
        } else {
          const responseLetter = singleLetterMatch[1].toUpperCase();
          const expectedLetter = mapIndexToLetter(qObj.answer);
          if (responseLetter === expectedLetter) {
            progress.correct++;
            log(`Correct answer (expected: ${expectedLetter}).`);
          } else {
            log(`Incorrect answer (expected: ${expectedLetter}).`);
          }
        }
        await setProgress({ id: "progress", ...progress, currentFile, questionIndex: progress.questionIndex });
        document.getElementById("correctCount").innerText = progress.correct;
        document.getElementById("questionCount").innerText = progress.currentQuestion;
        const score = progress.currentQuestion > 0 ? (progress.correct / progress.currentQuestion * 100).toFixed(2) : 0;
        document.getElementById("scorePercent").innerText = score;
        document.getElementById("nonLetterCount").innerText = progress.nonLetter;
        await new Promise(res => setTimeout(res, 500));
      }
      testing = false;
      document.getElementById("startTest").disabled = false;
      document.getElementById("stopTest").disabled = true;
      log('Testing complete.');
    }

    // --- Event listeners ---
    document.getElementById("startTest").addEventListener("click", () => {
      (async() => {
        if (!window.session) {
          try {
            showBusy(true);
            window.session = await window.ai.languageModel.create({ temperature: 1.0, topK: 1 });
          } catch (e) {
            log("Error creating session: " + e);
          } finally {
            showBusy(false);
          }
        }
        runTests();
      })();
    });

    document.getElementById("stopTest").addEventListener("click", () => {
      testing = false;
      document.getElementById("stopTest").disabled = true;
      document.getElementById("startTest").disabled = false;
      log('Testing paused.');
    });

    document.getElementById("clearResults").addEventListener("click", async () => {
      try {
        await clearDB();
        // Reset UI elements and progress variable.
        progress = { currentQuestion: 0, correct: 0, nonLetter: 0 };
        document.getElementById("currentCount").innerText = "0";
        document.getElementById("correctCount").innerText = "0";
        document.getElementById("questionCount").innerText = "0";
        document.getElementById("scorePercent").innerText = "0";
        document.getElementById("nonLetterCount").innerText = "0";
        logDiv.innerHTML = "";
        log('Results cleared.');
      } catch (e) {
        log(`Error clearing results: ${e}`);
      }
    });

    // --- Initialization ---
    (async () => {
      try {
        await initDB();
        await restoreProgress();
        await restoreLogs();
        // Check URL parameter for autoResume
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get("autoResume") === "true") {
          // Remove the autoResume parameter from the URL immediately
          urlParams.delete("autoResume");
          const newSearch = urlParams.toString();
          const newUrl = window.location.pathname + (newSearch ? "?" + newSearch : "");
          window.history.replaceState({}, '', newUrl);
          // Wait 2 seconds then resume tests
          setTimeout(() => {
            runTests();
          }, 2000);
        }
      } catch (e) {
        console.error("DB initialization error:", e);
      }
    })();
  </script>
</body>
</html>